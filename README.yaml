name: "aws-datadog-monitor"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-datadog-monitor"
# Short description of this project
description: |-
  This component provisions Datadog monitors and assigns Datadog roles to those monitors.

  It depends on the `datadog-configuration` component to obtain Datadog API keys.

usage: |-
  **Stack Level**: Regional

  Here's an example snippet for how to use this component:

  ```yaml
  components:
    terraform:
      datadog-monitor:
        settings:
          spacelift:
            workspace_enabled: true
        vars:
          enabled: true
          local_datadog_monitors_config_paths:
            - "catalog/monitors/dev/*.yaml"
  ```

  ## Conventions

  - Treat Datadog like a separate cloud provider with integrations
    ([datadog-integration](https://docs.cloudposse.com/components/library/aws/datadog-integration)) into your accounts.

  - Use the `catalog` convention to define a set of alerts. You can use ours or define your own:
    https://github.com/cloudposse/terraform-datadog-platform/tree/master/catalog/monitors

  - The monitors catalog for this component supports Datadog monitor exports. You can use
    [the status page of a monitor to export it from 'settings'](https://docs.datadoghq.com/monitors/manage/status/#settings).
    You can add the export to existing files or make new ones. Because the export is JSON formatted, it's also YAML
    compatible. If you prefer, you can convert the export to YAML using your text editor or a CLI tool like `yq`.

  ## Adjust Thresholds per Stack

  Since there are many parameters that may be adjusted for a given monitor, we define all monitors through YAML. By
  convention, we define the default monitors that should apply to all environments, and then adjust the thresholds per
  environment. This is accomplished using the `datadog-monitor` component variable `local_datadog_monitors_config_paths`,
  which defines the path to the YAML configuration files. By passing a path for `dev` and `prod`, we can define
  configurations that are different per environment.

  For example, you might have the following settings defined for `prod` and `dev` stacks that override the defaults.

  For the `dev` stack:

  ```
  components:
    terraform:
      datadog-monitor:
        vars:
          # Located in the components/terraform/datadog-monitor directory
          local_datadog_monitors_config_paths:
            - catalog/monitors/*.yaml
            - catalog/monitors/dev/*.yaml # note this line
  ```

  For the `prod` stack:

  ```
  components:
    terraform:
      datadog-monitor:
        vars:
          # Located in the components/terraform/datadog-monitor directory
          local_datadog_monitors_config_paths:
            - catalog/monitors/*.yaml
            - catalog/monitors/prod/*.yaml # note this line
  ```

  Behind the scenes (with `atmos`) we fetch all files from these glob patterns, template them, and merge them by key. If
  we peek into the `*.yaml` and `dev/*.yaml` files above you could see an example like this:

  **components/terraform/datadog-monitor/catalog/monitors/elb.yaml**

  ```
  elb-lb-httpcode-5xx-notify:
    name: "(ELB) {{ env }} HTTP 5XX client error detected"
    type: query alert
    query: |
      avg(last_15m):max:aws.elb.httpcode_elb_5xx{${context_dd_tags}} by {env,host} > 20
    message: |
      [${ dd_env }] [ {{ env }} ] lb:[ {{host}} ]
      {{#is_warning}}
      Number of HTTP 5XX client error codes generated by the load balancer > {{warn_threshold}}%
      {{/is_warning}}
      {{#is_alert}}
      Number of HTTP 5XX client error codes generated by the load balancer > {{threshold}}%
      {{/is_alert}}
      Check LB
    escalation_message: ""
    tags: {}
    options:
      renotify_interval: 60
      notify_audit: false
      require_full_window: true
      include_tags: true
      timeout_h: 0
      evaluation_delay: 60
      new_host_delay: 300
      new_group_delay: 0
      groupby_simple_monitor: false
      renotify_occurrences: 0
      renotify_statuses: []
      validate: true
      notify_no_data: false
      no_data_timeframe: 5
      priority: 3
      threshold_windows: {}
      thresholds:
        critical: 50
        warning: 20
    priority: 3
    restricted_roles: null
  ```

  **components/terraform/datadog-monitor/catalog/monitors/dev/elb.yaml**

  ```
  elb-lb-httpcode-5xx-notify:
    query: |
      avg(last_15m):max:aws.elb.httpcode_elb_5xx{${context_dd_tags}} by {env,host} > 30
    priority: 2
    options:
      thresholds:
        critical: 30
        warning: 10
  ```

  ## Key Notes

  ### Inheritance

  The default YAML is applied to every stage that it's deployed to. For `dev`, we override the thresholds and priority
  for this monitor. This merging is done by key of the monitor, in this case `elb-lb-httpcode-5xx-notify`.

  ### Templating

  The `${ dd_env }` syntax is Terraform templating. While double braces (`{{ env }}`) refer to Datadog templating, `${ dd_env }`
  is a template variable we pass into our monitors. In this example we use it to specify a grouping in the message. This
  value is passed in and can be overridden via stacks.

  We pass a value via:

  ```
  components:
    terraform:
      datadog-monitor:
        vars:
          # Located in the components/terraform/datadog-monitor directory
          local_datadog_monitors_config_paths:
            - catalog/monitors/*.yaml
            - catalog/monitors/dev/*.yaml
          # templatefile() is used for all yaml config paths with these variables.
          datadog_monitors_config_parameters:
            dd_env: "dev"
  ```

  This allows us to further use inheritance from stack configuration to keep our monitors DRY but configurable.

  Another available option is to use our catalog as base monitors and then override them with your specific fine tuning.

  ```
  components:
    terraform:
      datadog-monitor:
        vars:
          local_datadog_monitors_config_paths:
            - https://raw.githubusercontent.com/cloudposse/terraform-datadog-platform/0.27.0/catalog/monitors/ec2.yaml
            - catalog/monitors/ec2.yaml
  ```

  ## Other Gotchas

  Our integration action that checks for `'source_type_name' equals 'Monitor Alert'` will also be true for synthetics.
  Whereas if we check for `'event_type' equals 'query_alert_monitor'`, that's only true for monitors, because synthetics
  will only be picked up by an integration action when `event_type` is `synthetics_alert`.

  This is important if we need to distinguish between monitors and synthetics in OpsGenie, which is the case when we want
  to ensure clean messaging on OpsGenie incidents in Statuspage.

references:
  - name: cloudposse-terraform-components
    url: https://github.com/orgs/cloudposse-terraform-components/repositories
    description: "Cloud Posse's upstream component"
  - name: How to Monitor Everything with Datadog
    description: ""
    url: https://docs.cloudposse.com/layers/monitoring/datadog/
  - name: datadog-integration component
    description: ""
    url: https://docs.cloudposse.com/components/library/aws/datadog-integration/
tags:
  - component/datadog-monitor
  - layer/datadog
  - provider/aws
  - provider/datadog
# Categories of this project
categories:
  - component/datadog-monitor
  - layer/datadog
  - provider/aws
  - provider/datadog
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-datadog-monitor.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-datadog-monitor/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
